name: Build PHP Extension and Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest
            php: '8.1'
            ts: nts
          - name: Linux
            os: ubuntu-latest
            php: '8.2'
            ts: nts
          - name: Linux
            os: ubuntu-latest
            php: '8.3'
            ts: nts
          - name: Linux
            os: ubuntu-latest
            php: '8.4'
            ts: nts
          - name: Linux
            os: windows-latest
            php: '8.1'
            ts: nts
            sdkversion: '2.2.0'
            vsalias: vs16
            vcvarsopt: '-vcvars_ver=14.2'
          - name: Windows
            os: windows-latest
            php: '8.1'
            ts: ts
            sdkversion: '2.2.0'
            vsalias: vs16
            vcvarsopt: '-vcvars_ver=14.2'
          - name: Windows
            os: windows-latest
            php: '8.2'
            ts: nts
            sdkversion: '2.2.0'
            vsalias: vs16
            vcvarsopt: '-vcvars_ver=14.2'
          - name: Windows
            os: windows-latest
            php: '8.2'
            ts: ts
            sdkversion: '2.2.0'
            vsalias: vs16
            vcvarsopt: '-vcvars_ver=14.2'
          - name: Windows
            os: windows-latest
            php: '8.3'
            ts: nts
            sdkversion: '2.2.0'
            vsalias: vs16
            vcvarsopt: '-vcvars_ver=14.2'
          - name: Windows
            os: windows-latest
            php: '8.3'
            ts: ts
            sdkversion: '2.2.0'
            vsalias: vs16
            vcvarsopt: '-vcvars_ver=14.2'
          - name: Windows
            os: windows-latest
            php: '8.4'
            ts: nts
            sdkversion: '2.2.0'
            vsalias: vs17
            vcvarsopt: ''
          - name: Windows
            os: windows-latest
            php: '8.4'
            ts: ts
            sdkversion: '2.2.0'
            vsalias: vs17
            vcvarsopt: ''
          - name: macOS
            os: macos-latest
            php: '8.1'
            ts: nts
          - name: macOS
            os: macos-13
            php: '8.1'
            ts: nts
          - name: macOS
            os: macos-latest
            php: '8.2'
            ts: nts
          - name: macOS
            os: macos-13
            php: '8.2'
            ts: nts
          - name: macOS
            os: macos-latest
            php: '8.3'
            ts: nts
          - name: macOS
            os: macos-13
            php: '8.3'
            ts: nts
          - name: macOS
            os: macos-latest
            php: '8.4'
            ts: nts
          - name: macOS
            os: macos-13
            php: '8.4'
            ts: nts

    name: Build on ${{ matrix.os }} for PHP ${{ matrix.php }}-${{ matrix.ts }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: none
      env:
        phpts: ${{ matrix.ts }}
        COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install build and packaging dependencies (Ubuntu)
      if: ${{ startsWith(matrix.os, 'ubuntu-') }}
      run: |
        sudo apt-get update --allow-releaseinfo-change
        sudo apt-get install -y build-essential dpkg-dev fakeroot php${{ matrix.php }}-dev

    - name: Download and Setup PHP SDK & Source (Windows)
      if: ${{ startsWith(matrix.os, 'windows-') }}
      shell: pwsh
      run: |
        # Find the latest Visual Studio installation path with VSWhere
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        if ($vsPath) {
          $vcvarsallPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
          echo "VS_VCVARSALL=$vcvarsallPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Found vcvarsall at: $vcvarsallPath"
        } else {
          Write-Error "Visual Studio not found"
          exit 1
        }
        $phpFullVersion = php -r "echo PHP_VERSION;" # Get full version like 8.x.y
        if ($phpFullVersion) {
          echo "PHP_FULL_VERSION=$phpFullVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "PHP version : $phpFullVersion"
        } else {
          Write-Error "PHP not found"
          exit 1
        }
        if ("${{ matrix.ts }}" -eq "nts") {
          $tsUrl = "-nts"
        } else {
          $tsUrl = ""
        }
        $devPackUrl = "https://windows.php.net/downloads/releases/php-devel-pack-${phpFullVersion}${tsUrl}-Win32-${{ matrix.vsalias }}-x64.zip"
        $sdkUrl = "https://github.com/microsoft/php-sdk-binary-tools/archive/refs/tags/php-sdk-${{ matrix.sdkversion }}.zip"
        $currentDir = (Get-Location).Path

        Write-Host "SDK URL: $sdkUrl"
        Write-Host "Dev Pack Url: $devPackUrl"
        
        # Download and extract SDK
        echo "Downloading SDK..."
        Invoke-WebRequest -Uri $sdkUrl -OutFile php-sdk.zip
        Expand-Archive -Path php-sdk.zip -DestinationPath . -Force
        Remove-Item php-sdk.zip
        $sdkPath = Join-Path -Path $currentDir -ChildPath 'php-sdk-binary-tools-php-sdk-${{ matrix.sdkversion }}\msys2\usr\bin'
        echo "PHP_SDK_PATH=$sdkPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "PHP SDK PATH : $sdkPath"

        # Download and extract Dev Pack
        echo "Downloading DevPack..."
        Invoke-WebRequest -Uri $devPackUrl -OutFile php-dev-pack.zip
        Expand-Archive -Path php-dev-pack.zip -DestinationPath . -Force
        Remove-Item php-dev-pack.zip
        $devPackFolder = "php-${phpFullVersion}-devel-${{ matrix.vsalias }}-x64"
        $devPack = Join-Path -Path $currentDir -ChildPath $devPackFolder
        echo "PHP_DEV_PACK=$devPack" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Host "PHP DEV PACK : $devPack"
    
    - name: Install build dependencies (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') }}
      run: |
        brew install autoconf automake libtool pkg-config || echo "Brew install failed but proceeding..."
        
    - name: Get Extension version from header
      id: ext_version
      shell: bash
      run: |
        VERSION=$(sed -n 's/^ *# *define PHP_RINDOW_OPERATOROVL_VERSION *"\([^"]*\)".*/\1/p' php_rindow_operatorovl.h)
        if [[ -z "$VERSION" ]]; then
          echo "Error: Could not extract version from php_rindow_operatorovl.h"
          cat php_rindow_operatorovl.h || true
          exit 1
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted version: ${VERSION}"

    - name: Build extension (Linux)
      if: ${{ startsWith(matrix.os, 'ubuntu-') }}
      run: |
        phpize${{ matrix.php }}
        ./configure --with-php-config=$(which php-config${{ matrix.php }}) --enable-rindow_operatorovl
        make clean
        make

    - name: Build extension (Windows)
      if: ${{ startsWith(matrix.os, 'windows-') }}
      shell: cmd
      run: |
        REM Ensure PATH includes MSVC tools (should be set by msvc-dev-cmd action)
        REM PHP SDK PATH should be set by previous step using GITHUB_PATH or add-path
        call "%VS_VCVARSALL%" x64 ${{ matrix.vcvarsopt }}
        PATH %PATH%;%PHP_SDK_PATH%

        call "%PHP_DEV_PACK%\phpize"
  
        REM Configure the build (adjust paths and options if needed)
        REM Ensure config.w32 is used, enable the extension
        call configure --enable-rindow_operatorovl --with-prefix=C:\tools\php
  
        nmake clean
        nmake

    - name: Build extension (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') }}
      run: |
        phpize
        ./configure --with-php-config=$(which php-config) --enable-rindow_operatorovl
        make clean
        make

    - name: Run tests (Linux)
      if: ${{ startsWith(matrix.os, 'ubuntu-') }}
      run: make test
      env:
        NO_INTERACTION: 1
        REPORT_EXIT_STATUS: 1
        TEST_PHP_EXECUTABLE: /usr/bin/php${{ matrix.php }}

    - name: Run tests (Windows)
      if: ${{ startsWith(matrix.os, 'windows-') }}
      shell: cmd
      run: |
        call "%VS_VCVARSALL%" x64 ${{ matrix.vcvarsopt }}
        PATH %PATH%;%PHP_SDK_PATH%
        php -v
        nmake test
      env:
        NO_INTERACTION: 1
        REPORT_EXIT_STATUS: 1

    - name: Run tests (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') }}
      run: make test
      env:
        NO_INTERACTION: 1
        REPORT_EXIT_STATUS: 1
        TEST_PHP_EXECUTABLE: $(which php)

    - name: Determine DEB Artifact Info (Linux)
      if: ${{ startsWith(matrix.os, 'ubuntu-') }}
      id: deb_artifact_info
      run: |
        sh ./packaging.sh ${{ matrix.php }}
        PACKAGE_NAME=$(grep '^Package:' pkgwork/DEBIAN/control | cut -d' ' -f2)
        VERSION="${{ steps.ext_version.outputs.version }}"
        ARCHITECTURE=$(dpkg --print-architecture)
        DEB_FILENAME="${PACKAGE_NAME}_${VERSION}_${ARCHITECTURE}.deb"
        if [[ ! -f "$DEB_FILENAME" ]]; then
          echo "Error: Expected DEB file '$DEB_FILENAME' not found!"
          ls -l *.deb || true
          exit 1
        fi
        echo "path=${DEB_FILENAME}" >> $GITHUB_OUTPUT
        echo "name=${DEB_FILENAME}" >> $GITHUB_OUTPUT
        echo "Built DEB artifact: ${DEB_FILENAME}"
      shell: bash

    - name: Upload DEB artifact (Linux)
      if: ${{ startsWith(matrix.os, 'ubuntu-') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.deb_artifact_info.outputs.name }}
        path: ${{ steps.deb_artifact_info.outputs.path }}
        retention-days: 7

    - name: Upload Release Asset (DEB) (Linux)
      if: ${{ startsWith(matrix.os, 'ubuntu-') && github.event_name == 'release' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.deb_artifact_info.outputs.path }}
        asset_name: ${{ steps.deb_artifact_info.outputs.name }}
        asset_content_type: application/vnd.debian.binary-package

    - name: Determine DLL Artifact Info (Windows)
      if: ${{ startsWith(matrix.os, 'windows-') }}
      id: dll_artifact_info
      shell: pwsh
      run: |
        dir -Path . -Filter php_rindow_operatorovl.dll -Recurse -File
        $dllPath = (Get-ChildItem -Recurse -Filter php_rindow_operatorovl.dll -ErrorAction SilentlyContinue | Select-Object -First 1).FullName
        if (-not $dllPath) {
          echo "Error: Built DLL file (php_rindow_operatorovl.dll) not found!"
          Get-ChildItem -Recurse | Select-Object FullName -First 100
          exit 1
        }
        $zipName = "rindow_operatorovl-php${{ matrix.php }}-${{ steps.ext_version.outputs.version }}-win-${{ matrix.ts }}-${{ matrix.vsalias}}-x64.zip"
        Compress-Archive -Path $dllPath -DestinationPath $zipName -Force
        echo "DLL path found: $dllPath"
        echo "Artifact name: $zipName"
        echo "path=$zipName" >> $env:GITHUB_OUTPUT
        echo "name=$zipName" >> $env:GITHUB_OUTPUT

    - name: Upload DLL artifact (Windows)
      if: ${{ startsWith(matrix.os, 'windows-') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.dll_artifact_info.outputs.name }}
        path: ${{ steps.dll_artifact_info.outputs.path }}
        retention-days: 7

    - name: Upload Release Asset (DLL) (Windows)
      if: ${{ startsWith(matrix.os, 'windows-') && github.event_name == 'release' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.dll_artifact_info.outputs.path }}
        asset_name: ${{ steps.dll_artifact_info.outputs.name }}
        asset_content_type: application/zip

    - name: Determine SO Artifact Info (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') }}
      id: so_artifact_info
      run: |
        SO_FILE=$(find . -path '*/modules/*.so' -name 'rindow_operatorovl.so' | head -n 1)
        if [[ -z "$SO_FILE" ]]; then
          echo "Error: Built SO file (rindow_operatorovl.so) not found!"
          echo "Searching for .so files..."
          find . -name '*.so' -ls || true
          exit 1
        fi
        ARCH=$(uname -m)
        VERSION="${{ steps.ext_version.outputs.version }}"
        ZIP_FILENAME="rindow_operatorovl-php${{ matrix.php }}-${VERSION}-macos-${ARCH}.zip"
        zip -j "$ZIP_FILENAME" "$SO_FILE"
        echo "SO file found: $SO_FILE"
        echo "Artifact name: $ZIP_FILENAME"
        echo "path=${ZIP_FILENAME}" >> $GITHUB_OUTPUT
        echo "name=${ZIP_FILENAME}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Upload SO artifact (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.so_artifact_info.outputs.name }}
        path: ${{ steps.so_artifact_info.outputs.path }}
        retention-days: 7

    - name: Upload Release Asset (SO) (macOS)
      if: ${{ startsWith(matrix.os, 'macos-') && github.event_name == 'release' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.so_artifact_info.outputs.path }}
        asset_name: ${{ steps.so_artifact_info.outputs.name }}
        asset_content_type: application/zip

