name: Build PHP Extension and Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #php: ['8.1', '8.2', '8.3']
        php: ['8.1']

    name: Build and Package on Ubuntu for PHP ${{ matrix.php }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: none
        tools: phpize, php-config
      env:
        COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Install build and packaging dependencies (Ubuntu)
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential dpkg-dev fakeroot

    - name: Get Extension version from header
      id: ext_version
      run: |
        VERSION=$(grep '#define PHP_RINDOW_OPERATOROVL_VERSION' php_rindow_operatorovl.h | cut -d '"' -f 2)
        if [[ -z "$VERSION" ]]; then
          echo "Error: Could not extract version from php_rindow_operatorovl.h"
          exit 1
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Extracted version: ${VERSION}"

    - name: Build extension
      run: |
        phpize
        ./configure --enable-rindow_operatorovl
        make clean
        make

    - name: Make packaging script executable
      run: chmod +x packaging.sh

    - name: Create DEB package
      run: ./packaging.sh ${{ matrix.php }}

    - name: Determine DEB Artifact Info
      id: deb_artifact_info
      run: |
        # filename <package>_<version>_<architecture>.deb 
        PACKAGE_NAME=$(grep '^Package:' pkgwork/DEBIAN/control | cut -d' ' -f2)
        VERSION="${{ steps.ext_version.outputs.version }}"
        ARCHITECTURE=$(dpkg --print-architecture)
        DEB_FILENAME="${PACKAGE_NAME}_${VERSION}_${ARCHITECTURE}.deb"
        if [[ ! -f "$DEB_FILENAME" ]]; then
          echo "Error: Expected DEB file '$DEB_FILENAME' not found in current directory!"
          ls -l *.deb || true
          exit 1
        fi
        echo "path=${DEB_FILENAME}" >> $GITHUB_OUTPUT
        echo "name=${DEB_FILENAME}" >> $GITHUB_OUTPUT
        echo "Built DEB artifact: ${DEB_FILENAME}"

    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.deb_artifact_info.outputs.name }}
        path: ${{ steps.deb_artifact_info.outputs.path }}
        retention-days: 7

    - name: Upload Release Asset (DEB)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.deb_artifact_info.outputs.path }}
        asset_name: ${{ steps.deb_artifact_info.outputs.name }}
        asset_content_type: application/vnd.debian.binary-package
